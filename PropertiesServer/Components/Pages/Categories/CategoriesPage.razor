@page "/categories"

@inject IJSRuntime JsRuntime
@inject ICategoryRepository CategoryRepository

@attribute [Authorize]

<h3 class="text-center">Categories</h3>
<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">List Categories</h4>
            </div>
            <div class="col-3 offset-2">
                <NavLink href="add-category" class="btn btn-primary">
                    <i class="bi bi-plus-circle-fill fs-4"></i>&nbsp;New Category
                </NavLink>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-bordered table-hover">
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
                @if (CategoryDto.Count() > 0)
                {
                    foreach (var category in CategoryDto)
                    {
                        <tr>
                            <td>@category.Id</td>
                            <td>@category.NameCategory</td>
                            <td>@category.Description</td>
                            <td>
                                <NavLink href="@($"edit-category/{category.Id}")" class="btn btn-secondary">
                                    <i class="bi bi-pencil-square"></i>&nbsp;Edit
                                </NavLink>
                                <button class="btn btn-danger" @onclick="() => OnDeleteCategory(category.Id)">
                                    <i class="bi bi-trash3-fill"></i>&nbsp;Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">No registers </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<ConfirmDelete  OnConfirmDelete="ConfirmDeleted" ProcessParentComponent="OnProcess" />


@code {
    private IEnumerable<CategoryDto> CategoryDto { get; set; } = new List<CategoryDto>();
    public bool OnProcess { get; set; } = false;
    public int? DeleteCategoryId { get; set; } = null;
    
    protected override async Task OnInitializedAsync()
    {
        CategoryDto = await CategoryRepository.GetAllCategories();
    }

    private async Task OnDeleteCategory(int categoryId)
    {
        DeleteCategoryId = categoryId;
        await JsRuntime.InvokeVoidAsync("showModalOnConfirmDeleted");
    }
    
    public async Task ConfirmDeleted(bool confirm)
    {
        OnProcess = true;
        if (confirm && DeleteCategoryId != null)
        {
            await CategoryRepository.DeleteCategory(DeleteCategoryId.Value);
            await JsRuntime.ToastrSuccess("Category Deleted Successfully!");
            CategoryDto = await CategoryRepository.GetAllCategories();
        }
        await JsRuntime.InvokeVoidAsync("hideModalOnConfirmDeleted");
        OnProcess = false;
    }
}













