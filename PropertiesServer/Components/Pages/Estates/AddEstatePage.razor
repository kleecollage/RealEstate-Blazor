@page "/add-estate"

@inject IEstateRepository EstateRepository
@inject ICategoryRepository CategoryRepository
@inject IEstateImageRepository EstateImageRepository
@inject IUploadFile UploadFile
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@attribute [Authorize]

<h2 class="text-center">Add New Estate</h2>
<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h2 class="text-dark">New Estate</h2>
            </div>
        </div>
    </div>
    <div class="card-body">
        <EditForm Model="EstateDto" OnValidSubmit="@(() => OnCreateEstate())">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="container">

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Name:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="EstateDto.EstateName" class="form-control" placeholder="Enter estate name"/>
                            <ValidationMessage For="() => EstateDto.EstateName"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Description:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="EstateDto.EstateDescription" class="form-control" placeholder="Enter estate description"/>
                            <ValidationMessage For="() => EstateDto.EstateDescription"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Area(m2):</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="EstateDto.Area" class="form-control" placeholder="Enter estate area on square meters"/>
                            <ValidationMessage For="() => EstateDto.Area"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />
                
                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Rooms:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="EstateDto.Rooms" class="form-control" placeholder="Enter number of rooms"/>
                            <ValidationMessage For="() => EstateDto.Rooms"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />
                
                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Bathrooms:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="EstateDto.Bathrooms" class="form-control" placeholder="Enter number of bathrooms"/>
                            <ValidationMessage For="() => EstateDto.Bathrooms"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Parking Lots:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="EstateDto.ParkingLots" class="form-control" placeholder="Enter number of parkng lots"/>
                            <ValidationMessage For="() => EstateDto.ParkingLots"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Price:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="EstateDto.Price" class="form-control" placeholder="Enter the estate price"/>
                            <ValidationMessage For="() => EstateDto.Price"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Active:</label>
                        </div>
                        <div class="col-6">
                            <InputCheckbox @bind-Value="EstateDto.Active"/>
                            <ValidationMessage For="() => EstateDto.Active"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Category:</label>
                        </div>
                        <div class="col-6">
                            <InputSelect @bind-Value="_selectedCategory.Id" class="form-control">
                                <option disabled selected value="">-- Select a Category --</option>
                                @foreach (var category in DropDownCategoryDto)
                                {
                                    <option value="@category.Id">@category.NameCategory</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <br />
                
                <div class="form-group" style="padding-top: 30px; padding-bottom: 30px">
                    <hr />
                    <h4>Estate Images</h4>
                    <InputFile OnChange="OnUploadFiles" multiple></InputFile>
                    <div class="row">
                        @if (UploadFileProcessStarted)
                        {
                            <div class="col-md-12">
                                <span><i class="bi bi-hourglass-split"></i>Upload Files ...</span>
                            </div>
                        }
                        @if (EstateDto.UrlImages != null && EstateDto.UrlImages.Count > 0)
                        {
                            int serial = 1;
                            foreach (var estateImage in EstateDto.UrlImages)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="estate-image" style="background: url('@estateImage') 50% 50%">
                                        <span class="title-estate-image">@serial</span>
                                    </div>
                                    <button type="button" @onclick="() => RemoveImage(estateImage)" class="btn btn-outline-danger mt-4">
                                        Remove
                                    </button>
                                </div>
                                serial++;
                            }
                        }
                    </div>
                </div>
                
                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-send-check-fill"></i>&nbsp;Submit Estate
                            </button>
                        </div>
                        <div class="col-6">
                            <NavLink href="estates" class="btn btn-secondary">
                                <i class="bi bi-arrow-90deg-left"></i>&nbsp;Go Back
                            </NavLink>
                        </div>
                    </div>
                </div>
                <br />

            </div>
        </EditForm>
    </div>
</div>

@code {
    private EstateDto EstateDto { get; set; } = new();
    private readonly DropDownCategoryDto _selectedCategory = new();
    private EstateImageDto EstateImageDto { get; set; } = new();
    private bool UploadFileProcessStarted { get; set; } = false;
    
    // Obtain categories to dropdown selector (List<select>)
    private IEnumerable<DropDownCategoryDto> DropDownCategoryDto { get; set; } = new List<DropDownCategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        DropDownCategoryDto = await CategoryRepository.GetDropDownCategories();
    } 
    
    private async Task OnCreateEstate()
    {
        var nameEstateExists = await EstateRepository.ExistsNameEstate(EstateDto.EstateName);
        if (nameEstateExists != null)
        {
            // Duplicated estate error
            await JsRuntime.ToastrError("Estate name already exists!");
            return;
        }
        // OK :)
        EstateDto.CategoryId = _selectedCategory.Id;
        var createEstate = await EstateRepository.CreateEstate(EstateDto);
        await AddEstateImages(createEstate);
        await JsRuntime.ToastrSuccess("Estate Created Successfully!");
        NavigationManager.NavigateTo("estates");
    }

    private async Task OnUploadFiles(InputFileChangeEventArgs e)
    {
        UploadFileProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count() > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    if (file.Size > 10 * 1024 * 1024) // 10 MB
                    {
                        await JsRuntime.ToastrError("Max File Size 10MB");
                        return;
                    }

                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" 
                        || fileInfo.Extension.ToLower() == ".png"
                        || fileInfo.Extension.ToLower() == ".jpeg" )
                    {
                        var uploadedImagePath = await UploadFile.UploadFiles(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Supported formats only: .jgp/.jpeg/.png");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (EstateDto.UrlImages != null && EstateDto.UrlImages.Any())
                    {
                        EstateDto.UrlImages.AddRange(images);
                    }
                    else
                    {
                        EstateDto.UrlImages = new List<string>();
                        EstateDto.UrlImages.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Ooops, Something went wrong. Try again leater");
                    return;
                }
            }
            UploadFileProcessStarted = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    internal async Task RemoveImage(string imageUrl)
    {
        try
        {
            var imageIdx = EstateDto.UrlImages.FindIndex(i => i == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}EstateImages/", "");
            
            if (EstateDto.Id == 0) UploadFile.DeleteFile(imageName);
            
            EstateDto.UrlImages.RemoveAt(imageIdx);
        }
        catch (Exception e)
        {
            await JsRuntime.ToastrError(e.Message);
        }
    }

    private async Task AddEstateImages(EstateDto estateDto)
    {
        foreach (var urlImage in EstateDto.UrlImages)
        {
            if (EstateDto.EstateImages == null
                || EstateDto.EstateImages.All(i => i.ImageUrl != urlImage))
            {
                EstateImageDto = new EstateImageDto
                {
                    EstateId = estateDto.Id,
                    ImageUrl = urlImage
                };
                await EstateImageRepository.CreateEstateImage(EstateImageDto);
            }
        }
    }
}


















