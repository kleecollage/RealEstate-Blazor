@page "/estates"

@inject IEstateRepository EstateRepository
@inject IUploadFile UploadFile
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h3 class="text-center">Estates</h3>
<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">List Estates</h4>
            </div>
            <div class="col-3 offset-2">
                <NavLink href="add-estate" class="btn btn-success">
                    <i class="bi bi-plus-circle-fill fs-4"></i>&nbsp;New Estate
                </NavLink>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-bordered table-hover">
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Area(m2)</th>
                <th>Rooms</th>
                <th>Bathrooms</th>
                <th>Parking Lots</th>
                <th>Price</th>
                <th>Is Active</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @if (EstateDto.Count() > 0)
            {
                foreach (var estate in EstateDto)
                {
                    <tr>
                        <td>@estate.Id</td>
                        <td>@estate.EstateName</td>
                        <td>@estate.EstateDescription</td>
                        <td>@estate.Area</td>
                        <td>@estate.Rooms</td>
                        <td>@estate.Bathrooms</td>
                        <td>@estate.ParkingLots</td>
                        <td>@estate.Price</td>
                        <td>@estate.Category.NameCategory</td>
                        <td>@estate.Active</td>
                        <td>
                            <NavLink href="@($"edit-estate/{estate.Id}")" class="btn btn-primary">
                                <i class="bi bi-pencil-square"></i>&nbsp;Edit
                            </NavLink>
                            <button class="btn btn-danger" @onclick="() => OnDeleteEstate(estate.Id)">
                                <i class="bi bi-trash3-fill"></i>&nbsp;Delete
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="10" class="text-center">No registers </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<ConfirmDelete OnConfirmDelete="ConfirmDeleted" ProcessParentComponent="OnProcess" />

@code {
    private IEnumerable<EstateDto> EstateDto { get; set; } = new List<EstateDto>();
    public bool OnProcess { get; set; } = false;
    public int? DeleteEstateId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        EstateDto = await EstateRepository.GetAllEstates();
    }
    
    private async Task OnDeleteEstate(int estateId)
    {
        DeleteEstateId = estateId;
        await JsRuntime.InvokeVoidAsync("showModalOnConfirmDeleted");
    }

    public async Task ConfirmDeleted(bool confirm)
    {
        OnProcess = true;
        if (confirm && DeleteEstateId != null)
        {
            EstateDto estate = await EstateRepository.GetEstate(DeleteEstateId.Value);

            foreach (var image in estate.EstateImages)
            {
                var nameImage = image.ImageUrl.Replace($"{NavigationManager.BaseUri}EstateImages/", "");
                UploadFile.DeleteFile(nameImage);
            }
            
            await EstateRepository.DeleteEstate(DeleteEstateId.Value);
            await JsRuntime.ToastrSuccess("Estate Deleted Successfully!");
            EstateDto = await EstateRepository.GetAllEstates();
        }
        await JsRuntime.InvokeVoidAsync("hideModalOnConfirmDeleted");
        OnProcess = false;
    }
}













